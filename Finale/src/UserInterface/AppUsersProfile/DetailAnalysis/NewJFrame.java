/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AppUsersProfile.DetailAnalysis;

import Business.UserAccount.UserAccount;
import UserInterface.AppUsersProfile.Setup.SyncDeviceJPanel;
import com.alee.extended.panel.CenterPanel;
import com.alee.extended.panel.GroupPanel;
import com.alee.extended.time.ClockType;
import com.alee.extended.time.WebClock;
import com.alee.laf.WebLookAndFeel;
import com.alee.laf.button.WebButton;
import com.alee.managers.CoreManagers;
import com.alee.managers.notification.NotificationIcon;
import com.alee.managers.notification.NotificationManager;
import com.alee.managers.notification.NotificationOption;
import com.alee.managers.notification.WebNotification;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutionException;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author Zak
 */
public class NewJFrame extends javax.swing.JFrame {
//private final WebButton notification3;
private final WebButton notification1;
private JPanel userProcessContainer;
private UserAccount userAccount;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        
        WebLookAndFeel.install ();
        CoreManagers.initialize ();
        WebLookAndFeel.initializeManagers ();
        initComponents();
         notification1 = btnNotifcation;
         SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
   @Override
   protected Boolean doInBackground() throws Exception {
    // Simulate doing something useful.
    for (int i = 0; i <= 100; i++) {
     Thread.sleep(10000);
     System.out.println("Running " + i);
     notifyManager();
     System.out.println("Running " + i);
    }

    // Here we can return some object of whatever type
    // we specified for the first template parameter.
    // (in this case we're auto-boxing 'true').
    return true;
   }

   // Can safely update the GUI from this method.
   protected void done() {
    
    boolean status;
    try {
     // Retrieve the return value of doInBackground.
     status = get();
     //notifyManager();
    } catch (InterruptedException e) {
     // This is thrown if the thread's interrupted.
    } catch (ExecutionException e) {
     // This is thrown if we throw an exception
     // from doInBackground.
    }
   }
   
   
  };
  
  worker.execute();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNotifcation = new com.alee.laf.button.WebButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnNotifcation.setText("webButton1");
        btnNotifcation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotifcationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(162, 162, 162)
                    .addComponent(btnNotifcation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(162, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(138, 138, 138)
                    .addComponent(btnNotifcation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(138, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void notifyManager() throws InterruptedException{
//        final WebNotification notificationPopup = new WebNotification ();
//                notificationPopup.setIcon ( NotificationIcon.clock );
//                notificationPopup.setDisplayTime ( 10000 );
//
//                final WebClock clock = new WebClock ();
//                clock.setClockType ( ClockType.timer );
//                clock.setTimeLeft ( 11000 );
//                clock.setTimePattern ( "'This notification will close in' ss 'seconds'" );
//                notificationPopup.setContent ( new GroupPanel ( clock ) );
//
//                NotificationManager.showNotification ( notificationPopup );
//                clock.start ();

                
//        final WebClock clock = new WebClock ();
//        clock.setClockType ( ClockType.timer );
//        clock.setTimeLeft ( 11000 );
//         clock.start ();
//        clock.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                    if ( clock.getTimeLeft() <= 1000 )
//                    {
//                        clock.fireActionPerformed();
//                        
//                    }
//                   
//                    clock.setTimeLeft(11000);
//                    clock.start();
//            }       
//        });
        
                             
        final WebNotification notificationPopup = new WebNotification ();
        notificationPopup.setIcon ( NotificationIcon.question );
        //notificationPopup.setDisplayTime ( 5000 );
        final JLabel label = new JLabel ( "Please Update your Vital Signs" );
        final WebButton button1 = new WebButton ( "Update" );
        final WebButton button2 = new WebButton ( "Later" );
        button1.setRolloverDecoratedOnly ( true );
        button1.setDrawFocus ( false );
        button1.setLeftRightSpacing ( 0 );
        button1.setBoldFont ();
        button2.setRolloverDecoratedOnly ( true );
        button2.setDrawFocus ( false );
        button2.setLeftRightSpacing ( 0 );
        button2.setBoldFont ();
        button1.addActionListener ( new ActionListener ()
            {
                @Override
                public void actionPerformed ( final ActionEvent e )
                {
                    SyncDeviceJPanel syncDeviceJPanel = new SyncDeviceJPanel(userProcessContainer, userAccount);
                    userProcessContainer.add("syncDevicesJPanel", syncDeviceJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
            } );
            button2.addActionListener ( new ActionListener ()
                {
                    @Override
                    public void actionPerformed ( final ActionEvent e )
                    {
                        notificationPopup.hidePopup ();
                    }
                } );
                final CenterPanel centerPanel = new CenterPanel ( button1, false, true );
                final CenterPanel centerPanel2 = new CenterPanel( button2, false, true );
                
                notificationPopup.setContent ( new GroupPanel ( 2, label, centerPanel,centerPanel2 ) );

                NotificationManager.showNotification ( notificationPopup );
                Thread.sleep(5000);
                notificationPopup.hidePopup(); 
        

    }
    private void btnNotifcationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotifcationActionPerformed
        // TODO add your handling code here:

                        NotificationManager.showNotification ( "Choose one of available options...", NotificationIcon.database.getIcon (),
                                    NotificationOption.apply, NotificationOption.discard );

//        final WebClock clock = new WebClock ();
//        clock.setClockType ( ClockType.timer );
//        clock.setTimeLeft ( 11000 );
//        clock.start ();
//        
//        if (clock.getTimeLeft() == 00){
//                        
//        final WebNotification notificationPopup = new WebNotification ();
//        notificationPopup.setIcon ( NotificationIcon.question );
//        notificationPopup.setDisplayTime ( 10000 );
//        final JLabel label = new JLabel ( "Please Update your Vital Signs" );
//        final WebButton button1 = new WebButton ( "Update" );
//        final WebButton button2 = new WebButton ( "Later" );
//        button1.setRolloverDecoratedOnly ( true );
//        button1.setDrawFocus ( false );
//        button1.setLeftRightSpacing ( 0 );
//        button1.setBoldFont ();
//        button2.setRolloverDecoratedOnly ( true );
//        button2.setDrawFocus ( false );
//        button2.setLeftRightSpacing ( 0 );
//        button2.setBoldFont ();
//        button1.addActionListener ( new ActionListener ()
//            {
//                @Override
//                public void actionPerformed ( final ActionEvent e )
//                {
//                    SyncDeviceJPanel syncDeviceJPanel = new SyncDeviceJPanel(userProcessContainer, userAccount);
//                    userProcessContainer.add("syncDevicesJPanel", syncDeviceJPanel);
//                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//                    layout.next(userProcessContainer);
//                }
//            } );
//            button2.addActionListener ( new ActionListener ()
//                {
//                    @Override
//                    public void actionPerformed ( final ActionEvent e )
//                    {
//                        notificationPopup.hidePopup ();
//                    }
//                } );
//                final CenterPanel centerPanel = new CenterPanel ( button1, false, true );
//                final CenterPanel centerPanel2 = new CenterPanel( button2, false, true );
//                
//                notificationPopup.setContent ( new GroupPanel ( 2, label, centerPanel,centerPanel2 ) );
//
//                NotificationManager.showNotification ( notificationPopup );
//        }

    }//GEN-LAST:event_btnNotifcationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.laf.button.WebButton btnNotifcation;
    // End of variables declaration//GEN-END:variables
}
